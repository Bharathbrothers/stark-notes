{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Stark Notes: Here you can learn the overall concepts of Computer Science required for GATE CS.","title":"Home"},{"location":"Algorithms/","text":"Algorithms Algorithm Design Algorithm Design Techniques Asymptotic Notations Bst Dynamic Programming Graph Algorithms Greedy Algorithm Identify Function Minimum Maximum Minimum Spanning Trees Np Completeness Numerical Computation Recurrence Searching Sorting Spanning Tree Time Complexity","title":"Algorithms"},{"location":"Algorithms/#algorithms","text":"","title":"Algorithms"},{"location":"Algorithms/#algorithm-design","text":"","title":"Algorithm Design"},{"location":"Algorithms/#algorithm-design-techniques","text":"","title":"Algorithm Design Techniques"},{"location":"Algorithms/#asymptotic-notations","text":"","title":"Asymptotic Notations"},{"location":"Algorithms/#bst","text":"","title":"Bst"},{"location":"Algorithms/#dynamic-programming","text":"","title":"Dynamic Programming"},{"location":"Algorithms/#graph-algorithms","text":"","title":"Graph Algorithms"},{"location":"Algorithms/#greedy-algorithm","text":"","title":"Greedy Algorithm"},{"location":"Algorithms/#identify-function","text":"","title":"Identify Function"},{"location":"Algorithms/#minimum-maximum","text":"","title":"Minimum Maximum"},{"location":"Algorithms/#minimum-spanning-trees","text":"","title":"Minimum Spanning Trees"},{"location":"Algorithms/#np-completeness","text":"","title":"Np Completeness"},{"location":"Algorithms/#numerical-computation","text":"","title":"Numerical Computation"},{"location":"Algorithms/#recurrence","text":"","title":"Recurrence"},{"location":"Algorithms/#searching","text":"","title":"Searching"},{"location":"Algorithms/#sorting","text":"","title":"Sorting"},{"location":"Algorithms/#spanning-tree","text":"","title":"Spanning Tree"},{"location":"Algorithms/#time-complexity","text":"","title":"Time Complexity"},{"location":"Aptitude-and-Verbal/","text":"Aptitude Verbal","title":"Aptitude and Verbal"},{"location":"Aptitude-and-Verbal/#aptitude","text":"","title":"Aptitude"},{"location":"Aptitude-and-Verbal/#verbal","text":"","title":"Verbal"},{"location":"Compiler-Design/","text":"Compiler Design Abstract Syntax Tree Assembler Code Optimization Compilation Phases Expression Evaluation Expression Tree Grammar Infix Postfix Intermediate Code Left Recursion Lexical Analysis Linking Live Variable Macros Parameter Passing Parsing Programming In C Recursion Register Allocation Runtime Environments Static Single Assignment Syntax Directed Translation Target Code Generation Variable Scop","title":"Compiler Design"},{"location":"Compiler-Design/#compiler-design","text":"","title":"Compiler Design"},{"location":"Compiler-Design/#abstract-syntax-tree","text":"Assembler Code Optimization Compilation Phases Expression Evaluation Expression Tree Grammar Infix Postfix Intermediate Code Left Recursion Lexical Analysis Linking Live Variable Macros Parameter Passing Parsing Programming In C Recursion Register Allocation Runtime Environments Static Single Assignment Syntax Directed Translation Target Code Generation Variable Scop","title":"Abstract Syntax Tree"},{"location":"Computer-Networks/","text":"Computer Networks Application Layer Protocols Bit Stuffing Bridges Communication Congestion Control Crc Polynomial Cryptography Csma Cd Distance Vector Routing Dns Encoding Error Detection Ethernet Firewall Hamming Code Huffman Code Icmp Ip Packet Ipv4 Lan Technologies Link State Routing Longest Mask Mac Protocol Manchester Encoding Network Addressing Network Communication Network Flow Network Layering Network Protocols Network Security Network Switching Osi Protocol Routers Bridge Hubs Switches Routing Rsa Security Networks Selective Repeat Serial Communication Sliding Window Sockets Stop And Wait Subnetting Tcp Token Bucket Token Ring Udp Wifi","title":"Computer Networks"},{"location":"Computer-Networks/#computer-networks","text":"Application Layer Protocols Bit Stuffing Bridges Communication Congestion Control Crc Polynomial Cryptography Csma Cd Distance Vector Routing Dns Encoding Error Detection Ethernet Firewall Hamming Code Huffman Code Icmp Ip Packet Ipv4 Lan Technologies Link State Routing Longest Mask Mac Protocol Manchester Encoding Network Addressing Network Communication Network Flow Network Layering Network Protocols Network Security Network Switching Osi Protocol Routers Bridge Hubs Switches Routing Rsa Security Networks Selective Repeat Serial Communication Sliding Window Sockets Stop And Wait Subnetting Tcp Token Bucket Token Ring Udp Wifi","title":"Computer Networks"},{"location":"Computer-Organization/","text":"Computer Organization Addressing Modes Cache Memory Cisc Risc Architecture Clock Frequency Conflict Misses Control Unit Data Dependences Data Path Dma Expanding Opcode Instruction Execution Instruction Format Instruction Prefetch Interrupts Io Handling Machine Instructions Memory Interfacing Microprogramming Page Fault Pipelining Runtime Environments Speedup Virtual Memory","title":"Computer Organization"},{"location":"Computer-Organization/#computer-organization","text":"Addressing Modes Cache Memory Cisc Risc Architecture Clock Frequency Conflict Misses Control Unit Data Dependences Data Path Dma Expanding Opcode Instruction Execution Instruction Format Instruction Prefetch Interrupts Io Handling Machine Instructions Memory Interfacing Microprogramming Page Fault Pipelining Runtime Environments Speedup Virtual Memory","title":"Computer Organization"},{"location":"Data-Structures/","text":"Data Structres Abstract Data Type Arrays Binary Search Tree Binary Tree Graph Search Graphs Hashing Heap Linked Lists Queues Stack Trees","title":"Data Structures"},{"location":"Data-Structures/#data-structres","text":"Abstract Data Type Arrays Binary Search Tree Binary Tree Graph Search Graphs Hashing Heap Linked Lists Queues Stack Trees","title":"Data Structres"},{"location":"Databases/","text":"Databases Databases 1. B Tree 2. Candidate Keys 3. Concurrency 4. Conflict Serializable 5. Data Independence 6. Database Normalization 7. Er Diagram 8. Functional Dependencies 9. Indexing 10. Joins 11. Multivalued Dependency 4nf 12. Natural Join 13. Referential Integrity 14. Relational Algebra 15. Relational Calculus 16. Safe Query 17. Sql 18. Timestamp Ordering 19. Transaction And Concurrency 20. Transactions 21. Uniform Distribution","title":"Databases"},{"location":"Databases/#databases","text":"Databases 1. B Tree 2. Candidate Keys 3. Concurrency 4. Conflict Serializable 5. Data Independence 6. Database Normalization 7. Er Diagram 8. Functional Dependencies 9. Indexing 10. Joins 11. Multivalued Dependency 4nf 12. Natural Join 13. Referential Integrity 14. Relational Algebra 15. Relational Calculus 16. Safe Query 17. Sql 18. Timestamp Ordering 19. Transaction And Concurrency 20. Transactions 21. Uniform Distribution","title":"Databases"},{"location":"Digital-Logic/","text":"Digital Logic Digital Logic 1. Adder 2. Array Multiplier 3. Boolean Algebra 4. Boolean Expressions 5. Boolean Operations 6. Booth Recoding 7. Booths Algorithm 8. Canonical Normal Form 9. Carry Generator 10. Circuit Output 11. Conjunctive Normal Form 12. Decoder 13. Digital Circuits 14. Digital Counter 15. Dual Function 16. Fixed Point Representation 17. Flip Flop 18. Floating Point Representation 19. Functional Completeness 20. Gray Code 21. Half Adder 22. Hamming Code 23. Ieee Representation 24. K Map 25. Logic Gates 26. Memory Interfacing 27. Min No Gates 28. Min Product Of Sums 29. Min Sum Of Products Form 30. Minimal State Automata 31. Multiplexer 32. Number Representation 33. Phase Shift 34. Prime Implicants 35. Priority Encoder 36. Ram 37. Rom 38. Rs Flip Flop 39. Shift Registers 40. Static Hazard 41. Synchronous Asynchronous Circuits 42. Synchronous Circuit 43. Synchronous Counter 44. Xor","title":"Digital Logic"},{"location":"Digital-Logic/#digital-logic","text":"Digital Logic 1. Adder 2. Array Multiplier 3. Boolean Algebra 4. Boolean Expressions 5. Boolean Operations 6. Booth Recoding 7. Booths Algorithm 8. Canonical Normal Form 9. Carry Generator 10. Circuit Output 11. Conjunctive Normal Form 12. Decoder 13. Digital Circuits 14. Digital Counter 15. Dual Function 16. Fixed Point Representation 17. Flip Flop 18. Floating Point Representation 19. Functional Completeness 20. Gray Code 21. Half Adder 22. Hamming Code 23. Ieee Representation 24. K Map 25. Logic Gates 26. Memory Interfacing 27. Min No Gates 28. Min Product Of Sums 29. Min Sum Of Products Form 30. Minimal State Automata 31. Multiplexer 32. Number Representation 33. Phase Shift 34. Prime Implicants 35. Priority Encoder 36. Ram 37. Rom 38. Rs Flip Flop 39. Shift Registers 40. Static Hazard 41. Synchronous Asynchronous Circuits 42. Synchronous Circuit 43. Synchronous Counter 44. Xor","title":"Digital Logic"},{"location":"Discrete-Mathematics/","text":"Discrete Maths","title":"Discrete Mathematics"},{"location":"Discrete-Mathematics/#discrete-maths","text":"","title":"Discrete Maths"},{"location":"Engg-Mathematics/","text":"Engg. Maths","title":"Engg Mathematics"},{"location":"Engg-Mathematics/#engg-maths","text":"","title":"Engg. Maths"},{"location":"Operating-Systems/","text":"Operating System Computer Peripherals Concurrency Context Switch Critical Section Dining Philosopher Disk Scheduling Disks 8. Dma 9. Effective Memory Access 10. File 11. File System 12. Fork 13. Inter Process Communication 14. Interrupts 15. Io Handling 16. Linking Memory Allocation Memory Management Os Protection Overlay Page Replacement Precedence Graph Process Process Schedule Process Synchronization Resource Allocation Runtime Environments Semaphore System Calls Threads User Modes Virtual Memory Working Set","title":"Operating Systems"},{"location":"Operating-Systems/#operating-system","text":"","title":"Operating System"},{"location":"Operating-Systems/#computer-peripherals","text":"","title":"Computer Peripherals"},{"location":"Operating-Systems/#concurrency","text":"","title":"Concurrency"},{"location":"Operating-Systems/#context-switch","text":"","title":"Context Switch"},{"location":"Operating-Systems/#critical-section","text":"","title":"Critical Section"},{"location":"Operating-Systems/#dining-philosopher","text":"","title":"Dining Philosopher"},{"location":"Operating-Systems/#disk-scheduling","text":"","title":"Disk Scheduling"},{"location":"Operating-Systems/#disks","text":"","title":"Disks"},{"location":"Operating-Systems/#8-dma","text":"","title":"8. Dma"},{"location":"Operating-Systems/#9-effective-memory-access","text":"","title":"9. Effective Memory Access"},{"location":"Operating-Systems/#10-file","text":"","title":"10. File"},{"location":"Operating-Systems/#11-file-system","text":"","title":"11. File System"},{"location":"Operating-Systems/#12-fork","text":"","title":"12. Fork"},{"location":"Operating-Systems/#13-inter-process-communication","text":"","title":"13. Inter Process Communication"},{"location":"Operating-Systems/#14-interrupts","text":"","title":"14. Interrupts"},{"location":"Operating-Systems/#15-io-handling","text":"","title":"15. Io Handling"},{"location":"Operating-Systems/#16-linking","text":"Memory Allocation Memory Management Os Protection Overlay Page Replacement Precedence Graph Process Process Schedule Process Synchronization Resource Allocation Runtime Environments Semaphore System Calls Threads User Modes Virtual Memory Working Set","title":"16. Linking"},{"location":"Programming/","text":"Programming Hello Guys.! Programming In C Welcome to Programming Tutorial. In this you will learn all about programming in C required for gate. All you need to do is go through all the topics from this page and practice answering quiz questions from sites like geeksforgeeks and then try to solve programming questions from coding platforms like Hackerrank, Hackerearth etc to improve your coding skills and logic too. #include<stdio.h> void main(){ printf(\"Hello Guys!\"); } This is the basic Hello Program in C Language. C Language is High-Level Language developed by Dennis Ritchie at Bell Labs. #include is the header file which includes standard input-outout libraries. main() is the function from which the execution of a program takes place. void is the return type which indicates that main returns nothing. printf() is the predefined function which prints the string in \"\" onto the screen. Aliasing Goto Identify Function Loop Invariants Parameter Passing Programming Constructs Programming Paradigms Pseudo Code Recursion Runtime Environments Type Checking","title":"Programming"},{"location":"Programming/#programming","text":"Hello Guys.!","title":"Programming"},{"location":"Programming/#programming-in-c","text":"Welcome to Programming Tutorial. In this you will learn all about programming in C required for gate. All you need to do is go through all the topics from this page and practice answering quiz questions from sites like geeksforgeeks and then try to solve programming questions from coding platforms like Hackerrank, Hackerearth etc to improve your coding skills and logic too. #include<stdio.h> void main(){ printf(\"Hello Guys!\"); } This is the basic Hello Program in C Language. C Language is High-Level Language developed by Dennis Ritchie at Bell Labs. #include is the header file which includes standard input-outout libraries. main() is the function from which the execution of a program takes place. void is the return type which indicates that main returns nothing. printf() is the predefined function which prints the string in \"\" onto the screen.","title":"Programming In C"},{"location":"Programming/#aliasing","text":"","title":"Aliasing"},{"location":"Programming/#goto","text":"","title":"Goto"},{"location":"Programming/#identify-function","text":"","title":"Identify Function"},{"location":"Programming/#loop-invariants","text":"","title":"Loop Invariants"},{"location":"Programming/#parameter-passing","text":"","title":"Parameter Passing"},{"location":"Programming/#programming-constructs","text":"","title":"Programming Constructs"},{"location":"Programming/#programming-paradigms","text":"","title":"Programming Paradigms"},{"location":"Programming/#pseudo-code","text":"","title":"Pseudo Code"},{"location":"Programming/#recursion","text":"","title":"Recursion"},{"location":"Programming/#runtime-environments","text":"","title":"Runtime Environments"},{"location":"Programming/#type-checking","text":"","title":"Type Checking"},{"location":"Theory-of-Computation/","text":"Theory of Computation 1. Closure Property 2. Context Free Language 3. Decidability 4. Finite Automata 5. Grammar 6. Identify Class Language 7. Minimal State Automata 8. Non Determinism 9. Np Completeness 10. Pumping Lemma 11. Pushdown Automata 12. Recursive And Recursively Enumerable Languages 13. Regular Expressions 14. Regular Grammar 15. Regular Languages 16. Turing Machine","title":"Theory of Computation"},{"location":"Theory-of-Computation/#theory-of-computation","text":"","title":"Theory of Computation"},{"location":"Theory-of-Computation/#1-closure-property","text":"","title":"1. Closure Property"},{"location":"Theory-of-Computation/#2-context-free-language","text":"","title":"2. Context Free Language"},{"location":"Theory-of-Computation/#3-decidability","text":"","title":"3. Decidability"},{"location":"Theory-of-Computation/#4-finite-automata","text":"","title":"4. Finite Automata"},{"location":"Theory-of-Computation/#5-grammar","text":"","title":"5. Grammar"},{"location":"Theory-of-Computation/#6-identify-class-language","text":"","title":"6. Identify Class Language"},{"location":"Theory-of-Computation/#7-minimal-state-automata","text":"","title":"7. Minimal State Automata"},{"location":"Theory-of-Computation/#8-non-determinism","text":"","title":"8. Non Determinism"},{"location":"Theory-of-Computation/#9-np-completeness","text":"","title":"9. Np Completeness"},{"location":"Theory-of-Computation/#10-pumping-lemma","text":"","title":"10. Pumping Lemma"},{"location":"Theory-of-Computation/#11-pushdown-automata","text":"","title":"11. Pushdown Automata"},{"location":"Theory-of-Computation/#12-recursive-and-recursively-enumerable-languages","text":"","title":"12. Recursive And Recursively Enumerable Languages"},{"location":"Theory-of-Computation/#13-regular-expressions","text":"","title":"13. Regular Expressions"},{"location":"Theory-of-Computation/#14-regular-grammar","text":"","title":"14. Regular Grammar"},{"location":"Theory-of-Computation/#15-regular-languages","text":"","title":"15. Regular Languages"},{"location":"Theory-of-Computation/#16-turing-machine","text":"","title":"16. Turing Machine"},{"location":"about/","text":"Bharath Sathuri All these notes are compiled in markdown and this site is built using read the docs documentation theme.","title":"About"}]}